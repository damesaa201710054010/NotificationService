apply plugin: 'info.solidsoft.pitest.aggregator'

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://jitpack.io" } // Add this line
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    compileJava.dependsOn validateStructure
    sourceCompatibility = JavaVersion.VERSION_17

    //build.dependsOn 'pitest'

    test {
        useJUnitPlatform()
    }

    dependencies {
        if (osdetector.arch == "aarch_64") {
            implementation("io.netty:netty-all")
        }
        implementation "io.netty:netty-resolver-dns-native-macos:4.1.72.Final:osx-aarch_64"
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'
        implementation "io.netty:netty-resolver-dns-native-macos:4.1.112.Final:osx-x86_64"
        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.8.RELEASE'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        implementation 'org.apache.logging.log4j:log4j-api'
        implementation 'org.apache.logging.log4j:log4j-core'

        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation "com.google.code.gson:gson:${gsonVersion}"
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
        // Dependencia para Reactive Commons (asegúrate de usar una versión válida)
//        implementation 'org.reactivecommons:reactive-commons:1.1.0'
//
//        // Otras dependencias necesarias
//        implementation 'org.springframework.boot:spring-boot-starter-amqp'
//        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
//        implementation 'org.reactivecommons:reactivecommons-async:1.0.0'
 //       implementation 'org.reactivecommons:reactivecommons-api:1.0.0'
    }
    dependencyManagement {
        imports {
            mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:3.0.1"
        }
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

//    pitest {
//        targetClasses = ['co.com.distributed.*']
//        excludedClasses = []
//        excludedTestClasses = []
//        verbose = true
//        outputFormats = ['XML', 'HTML']
//        threads = 8
//        exportLineCoverage = true
//        timestampedReports = false
//        fileExtensionsToFilter.addAll('xml', 'orbit')
//        junit5PluginVersion = '1.2.1'
//        failWhenNoMutations = false
//        jvmArgs = ["-XX:+AllowRedefinitionToAddDeleteMethods"]
//    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.setRequired true
            xml.setOutputLocation layout.buildDirectory.file("reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation layout.buildDirectory.dir("reports/jacocoHtml")
        }
    }

}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = [test, subprojects.jacocoTestReport]
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

tasks.named('wrapper') {
    gradleVersion = '8.10.1'
}